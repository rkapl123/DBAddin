<html><head><title>Functions</title><link href="styles/default.css" type="text/css" rel="stylesheet" /></head><body><div class="header"> </div><br class="clear" /><div class="navigation"><ul><li><a href="index.htm">Documentation</a></li></ul><ul><li><a class="" href="4294967296-DBaddin.htm">DBaddin</a><ul><li><a class="current" href="4294969053.htm">Functions</a><ul><li><a class="" href="4294969053-Constructors.htm">Constructors</a></li><li><a class="" href="4294969053-Fields.htm">Fields</a></li><li><a class="" href="4294969053-Methods.htm">Methods</a></li></ul></li></ul></li></ul></div><div class="content"><h1>Functions Class</h1><div class="summary">Contains the public callable DB functions and helper functions</div><div class="inheritance"><h2>Inheritance Hierarchy</h2><ul><li><span>System.Object</span><ul><li><span class="current">DBaddin.Functions</span></li></ul></li></ul></div><div class="details"><span class="namespace"><em>Namespace:</em> <a href="4294967296-DBaddin.htm">DBaddin</a></span><span class="assembly"><em>Assembly:</em> DBaddin in (DBaddin.dll)
								</span></div>
        <div class="syntax">
            <h2>Syntax</h2>
            <pre><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> Functions</pre>
        </div>
    <p>
				The Functions type exposes the following members.
			</p><h2>Constructors</h2><table><thead><tr><th class="icon" /><th>Class</th><th>Summary</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_constructor_private.png" alt="private constructor" /></td><td><a href="4294969054.htm">Functions()</a></td><td /></tr></tbody></table><h2>Methods</h2><table><thead><tr><th class="icon" /><th>Name</th><th>Summary</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969082.htm">chainCells(Object[])</a></td><td><div class="summary">chains values contained in chainPart together with commas, mainly used for creating select header</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969166.htm">checkParamsAndCache(ref Object, Object, Object)</a></td><td><div class="summary">checks calculation mode, query and cached status message.</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969122.htm">checkPreventRefreshFlag()</a></td><td><div class="summary">check the preventRefreshFlag, either global or workbook level</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969163.htm">checkQueryAndTarget(Object, Object)</a></td><td><div class="summary">checks Query and targetRange parameters for existence and return error message.</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969077.htm">concatCells(Object[])</a></td><td><div class="summary">concatenates values contained in concatPart together (using .value attribute for cells)</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969079.htm">concatCellsSep(String, Object[])</a></td><td><div class="summary">concatenates values contained in concatPart (using .value for cells) using a separator</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969084.htm">currentWorkbook(Boolean)</a></td><td><div class="summary">get current Workbook path + filename or Workbook path only, if onlyPath is set</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969160.htm">DBAddinEnvironment()</a></td><td><div class="summary">Get the current selected Environment for DB Functions</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969161.htm">DBAddinSetting(Object)</a></td><td><div class="summary">Get the settings as given in keyword (e.g. SERVER=) for the currently selected Environment for DB Functions</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969058.htm">DBDate(Object, Int32)</a></td><td><div class="summary">Create database compliant date, time or datetime string from excel date type value</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969071.htm">DBinClause(Object[])</a></td><td><div class="summary">Create an in clause from cell values, strings are created with quotation marks, dates are created with DBDate</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969075.htm">DBinClauseDate(Object[])</a></td><td><div class="summary">Create an in clause from cell values, strings are created with quotation marks, dates are created with DBDate</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969073.htm">DBinClauseStr(Object[])</a></td><td><div class="summary">Create an in clause from cell values, strings are created with quotation marks, dates are created with DBDate</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969123.htm">DBListFetch(Object, Object, Object, Object, Int32, Object, Object, Object, Object)</a></td><td><div class="summary">Fetches a list of data defined by query into TargetRange. Optionally copy formulas contained in FormulaRange, extend list depending on ExtendDataArea (0(default) = overwrite, 1=insert Cells, 2=insert Rows) and add field headers if HeaderInfo = TRUE </div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969133.htm">DBListFetchAction(String, String, Range, Range, String, Object, Int32, Boolean, Boolean, Boolean, Boolean, String, String)</a></td><td><div class="summary">Actually do the work for DBListFetch: Query list of data delimited by maxRows and maxCols, write it into targetCells additionally copy formulas contained in formulaRange and extend list depending on extendArea</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969147.htm">DBRowFetch(Object, Object, Object[])</a></td><td><div class="summary">Fetches a row (single record) queried (defined in query) from DB (defined in ConnString) into targetArray</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969151.htm">DBRowFetchAction(String, String, Range, Object, String, Boolean)</a></td><td><div class="summary">Actually do the work for DBRowFetch: Query (assumed) one row of data, write it into targetCells</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969103.htm">DBSetPowerQuery(Object, Object)</a></td><td><div class="summary">Stores a query into an powerquery defined by queryName</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969106.htm">DBSetPowerQueryAction(String, String, Range, String)</a></td><td><div class="summary">set Query parameters (query text and connection string) of Query List or pivot table (incl. chart)</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969092.htm">DBSetQuery(Object, Object, Object)</a></td><td><div class="summary">Stores a query into an Object defined in targetRange (an embedded MS Query/List object, Pivot table, etc.)</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969096.htm">DBSetQueryAction(String, String, Range, String, Range, String)</a></td><td><div class="summary">set Query parameters (query text and connection string) of Query List or pivot table (incl. chart)</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969061.htm">DBString(Object[])</a></td><td><div class="summary">Create a database compliant string from cell values, potentially concatenating with other parts for easy inclusion of wildcards (%,_)</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969086.htm">DoConcatCellsSep(String, Boolean, Boolean, Boolean, Object[])</a></td><td><div class="summary">private function that actually concatenates values contained in Object array concatParts together (either using .text or .value for cells in concatParts) using a separator</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969116.htm">finishAction(XlCalculation, String, String)</a></td><td><div class="summary">common for DBListFetch and DBRowFetch Action procedures to finish, resetting anything (Cursor, calc mode, status bar, screen updating) that was set otherwise...</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969068.htm">formatPQDate(Double, Boolean)</a></td><td><div class="summary">takes an OADate and formats it as a powerquery compliant #date, #time or #datetime function</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969158.htm">getConfigDocCollection(String)</a></td><td><div class="summary">gets the documentation dictionary for the config dropdown (used by ConfigFiles.createConfigTreeMenu()). This is the basis for the documentation provided when clicking the config entries with Ctrl or Shift</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969065.htm">PQDate(Object, Boolean)</a></td><td><div class="summary">Creates a powerquery compliant #date function from excel date type value</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969063.htm">PQString(Object[])</a></td><td><div class="summary">Create a powerquery compliant string from cell values, potentially concatenating with other parts for easy inclusion of wildcards (%,_)</div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method" /></td><td><a href="4294969055.htm">preventRefresh(Boolean, Boolean)</a></td><td><div class="summary">set preventing of refreshing DB Functions</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969120.htm">setCalcModeBack(XlCalculation)</a></td><td><div class="summary">set calculation mode back to calcMode</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969111.htm">setExtents(Range, ref String, ref String, ref String)</a></td><td><div class="summary">common for DBListFetch, DBRowFetch and DBSetQuery Action procedures, setting the Extent Names at the beginning</div></td></tr><tr><td><img src="styles/images/vsobject_method_private.png" alt="private method" /></td><td><a href="4294969170.htm">ToRange(Object)</a></td><td><div class="summary">converts ExcelDna (C API) reference to excel (COM Based) Range</div></td></tr></tbody></table><h2>Fields</h2><table><thead><tr><th class="icon" /><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969179.htm">avoidRequeryDuringEdit</a></td><td><div class="summary">during rewriting the query as a sequence of cells, avoid refreshing of power query with this flag</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969173.htm">conn</a></td><td><div class="summary">connection object</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969174.htm">CurrConnString</a></td><td><div class="summary">connection string can be changed for calls with different connection strings</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969176.htm">dontCalcWhileClearing</a></td><td><div class="summary">avoid entering dblistfetch/dbrowfetch functions during clearing of list-fetch areas (before saving)</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969177.htm">preventRefreshFlag</a></td><td><div class="summary">globally avoid refreshing of DB Functions</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969178.htm">preventRefreshFlagColl</a></td><td><div class="summary">avoid refreshing of DB Functions on Workbook level (has precedence on global preventRefreshFlag)</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969180.htm">queryBackupColl</a></td><td><div class="summary">for power queries the previously set query is being stored here to retrieve it back in case the new set query fails (excel doesn't allow to enter the power query editor in this case)</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969175.htm">queryCache</a></td><td><div class="summary">query cache for avoiding unnecessary recalculations/data retrievals by volatile inputs to DB Functions (now(), etc.)</div></td></tr><tr><td><img src="styles/images/vsobject_field.png" alt="public field" /></td><td><a href="4294969172.htm">StatusCollection</a></td><td><div class="summary">global collection of information transport containers between action function and user-defined function resp. calc event procedure</div></td></tr></tbody></table></div><div class="footer">
			Produced by the <a href="https://livedocumenter.barryjones.me.uk/">Live Documenter</a>.
		</div></body></html>